import asyncio
import json
import datetime
from aiohttp import ClientSession
import config


class ProductChecker:
    def __init__(self):
        self.session = None
        self.headers = config.DEFAULT_HEADERS

    async def init(self) -> None:
        self.session = ClientSession(headers=self.headers)

    async def check_product_availability(self, product_id: int) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        await self.init()

        try:
            print(f"[INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {product_id}...")

            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
            detail_url = f"https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-1257786&spp=30&nm={product_id}"

            async with self.session.get(detail_url) as response:
                if response.status != 200:
                    return {
                        "product_id": product_id,
                        "status": "error",
                        "available": False,
                        "message": f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status}",
                        "checked_at": datetime.datetime.now().isoformat()
                    }

                data = await response.json()
                products = data.get("data", {}).get("products", [])

                if not products:
                    return {
                        "product_id": product_id,
                        "status": "not_found",
                        "available": False,
                        "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
                        "checked_at": datetime.datetime.now().isoformat()
                    }

                product = products[0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –Ω–∞–ª–∏—á–∏—é —Ä–∞–∑–º–µ—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
                is_available = False
                available_sizes = []
                total_stock = 0

                sizes = product.get("sizes", [])
                for size in sizes:
                    stocks = size.get("stocks", [])
                    size_stock = sum(stock.get("qty", 0) for stock in stocks)
                    if size_stock > 0:
                        is_available = True
                        available_sizes.append({
                            "size_name": size.get("name", "–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞"),
                            "stock": size_stock
                        })
                        total_stock += size_stock

                # –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –¶–ï–ù–´ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
                price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                discount = None

                if sizes and len(sizes) > 0:
                    price_data = sizes[0].get("price", {})

                    # –°–ø–æ—Å–æ–± 1: –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ (salePrice)
                    sale_price = price_data.get("product")
                    if sale_price:
                        price = int(sale_price / 100)

                    # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º totalPrice
                    if price == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                        total_price = price_data.get("total")
                        if total_price:
                            price = int(total_price / 100)

                    # –°–ø–æ—Å–æ–± 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º priceWithDiscount
                    if price == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                        price_with_discount = product.get("priceWithDiscount")
                        if price_with_discount:
                            price = int(price_with_discount / 100)

                    # –°–ø–æ—Å–æ–± 4: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º priceU
                    if price == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                        price_u = product.get("priceU")
                        if price_u:
                            price = int(price_u / 100)

                    # –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
                    base_price = price_data.get("basic")
                    sale_price = price_data.get("product")
                    if base_price and sale_price and base_price > sale_price:
                        discount_percent = int((1 - sale_price / base_price) * 100)
                        discount = f"{discount_percent}%"

                # –°–ø–æ—Å–æ–± 5: –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞ product
                if price == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                    sale_price = product.get("salePrice")
                    if sale_price:
                        price = int(sale_price / 100)

                if price == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                    price_u = product.get("priceU")
                    if price_u:
                        price = int(price_u / 100)

                return {
                    "product_id": product_id,
                    "status": "found",
                    "available": is_available,
                    "total_stock": total_stock,
                    "available_sizes": available_sizes,
                    "brand": product.get("brand", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                    "name": product.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "price": price,
                    "discount": discount,
                    "rating": product.get("reviewRating", 0),
                    "feedbacks": product.get("feedbacks", 0),
                    "product_url": f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx",
                    "checked_at": datetime.datetime.now().isoformat(),
                    "message": "–í –Ω–∞–ª–∏—á–∏–∏" if is_available else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
                }

        except Exception as e:
            return {
                "product_id": product_id,
                "status": "error",
                "available": False,
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}",
                "checked_at": datetime.datetime.now().isoformat()
            }
        finally:
            await self.session.close()

    def read_product_ids_from_file(self, filename: str = "–ê—Ä—Ç–∏–∫—É–ª—ã.txt") -> list:
        """–ß–∏—Ç–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                product_ids = []
                for line in file:
                    line = line.strip()
                    if line and line.isdigit():
                        product_ids.append(int(line))
                return product_ids
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return []

    async def check_multiple_products(self, product_ids: list) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤...")

        results = []
        available_count = 0
        not_available_count = 0
        error_count = 0

        for i, product_id in enumerate(product_ids, 1):
            print(f"üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä {i}/{len(product_ids)} (–∞—Ä—Ç–∏–∫—É–ª: {product_id})...")

            result = await self.check_product_availability(product_id)
            results.append(result)

            if result["status"] == "found" and result["available"]:
                available_count += 1
                status_icon = "‚úÖ"
            elif result["status"] == "found" and not result["available"]:
                not_available_count += 1
                status_icon = "‚ùå"
            else:
                error_count += 1
                status_icon = "‚ö†Ô∏è"

            print(f"   {status_icon} {result['message']}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.1)

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        summary = {
            "check_date": datetime.datetime.now().isoformat(),
            "total_checked": len(product_ids),
            "available": available_count,
            "not_available": not_available_count,
            "errors": error_count,
            "results": results
        }

        return summary

    def save_results_to_json(self, results: dict, filename: str = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    def print_summary(self, results: dict):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò –¢–û–í–ê–†–û–í")
        print("=" * 60)

        summary = results
        print(f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {summary['check_date']}")
        print(f"üî¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {summary['total_checked']} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {summary['available']} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {summary['not_available']} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏: {summary['errors']} —Ç–æ–≤–∞—Ä–æ–≤")

        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        available_products = [r for r in summary['results'] if r.get('available')]
        if available_products:
            print(f"\nüì¶ –î–û–°–¢–£–ü–ù–´–ï –¢–û–í–ê–†–´ ({len(available_products)}):")
            for product in available_products:
                price_display = f"{product['price']} —Ä—É–±." if isinstance(product['price'], int) else product['price']
                discount_display = f" | üéØ –°–∫–∏–¥–∫–∞: {product['discount']}" if product.get('discount') else ""
                print(f"   ‚Ä¢ {product['brand']} - {product['name']}")
                print(f"     üí∞ {price_display}{discount_display} | üì¶ {product['total_stock']} —à—Ç.")
                print(f"     üîó {product['product_url']}\n")

        print("=" * 60)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    checker = ProductChecker()

    print("üîç –ú–ê–°–°–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í WILDBERRIES")
    print("=" * 50)
    print("–ß—Ç–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞...")

    # –ß–∏—Ç–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –∏–∑ —Ñ–∞–π–ª–∞
    product_ids = checker.read_product_ids_from_file("–ê—Ä—Ç–∏–∫—É–ª—ã.txt")

    if not product_ids:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ê—Ä—Ç–∏–∫—É–ª—ã.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É)")
        return

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(product_ids)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≤–∞—Ä–æ–≤...")
    results = await checker.check_multiple_products(product_ids)

    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    checker.print_summary(results)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    checker.save_results_to_json(results, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.json")

    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    # –î–ª—è Windows –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π event loop policy
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")