import schedule
import asyncio
import time
import datetime
import threading
from main import WildBerriesParser
import config


def calculate_next_run_time():
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    now = datetime.datetime.now()
    next_run = now + datetime.timedelta(minutes=config.RUN_INTERVAL_MINUTES)
    return next_run


def print_time_until_next(next_run_time):
    """–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    now = datetime.datetime.now()
    time_until_next = next_run_time - now
    minutes_until = int(time_until_next.total_seconds() // 60)
    seconds_until = int(time_until_next.total_seconds() % 60)

    print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑: {minutes_until} –º–∏–Ω—É—Ç {seconds_until} —Å–µ–∫—É–Ω–¥")
    print(f"üìÖ –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {next_run_time.strftime('%H:%M:%S')}")
    print("-" * 60)


def run_async_parsing():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –Ω–æ–≤—ã–º event loop"""

    def run_in_thread():
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        try:
            current_time = datetime.datetime.now().strftime('%H:%M:%S')
            print(f"üîÑ [{current_time}] –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            wbp = WildBerriesParser()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            loop.run_until_complete(wbp.single_run())

            end_time = datetime.datetime.now().strftime('%H:%M:%S')
            print(f"‚úÖ [{end_time}] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            # –í—ã—á–∏—Å–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            next_run = calculate_next_run_time()
            print_time_until_next(next_run)

        except Exception as e:
            error_time = datetime.datetime.now().strftime('%H:%M:%S')
            print(f"‚ùå [{error_time}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

            # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            next_run = calculate_next_run_time()
            print_time_until_next(next_run)
        finally:
            loop.close()

    thread = threading.Thread(target=run_in_thread)
    thread.daemon = True
    thread.start()


def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    print("üìÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ü–ê–†–°–ï–†–ê –ó–ê–ü–£–©–ï–ù")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞: –∫–∞–∂–¥—ã–µ {config.RUN_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
    print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{config.SEARCH_QUERY}'")
    print("=" * 60)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule.every(config.RUN_INTERVAL_MINUTES).minutes.do(run_async_parsing)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    print(f"üöÄ [{datetime.datetime.now().strftime('%H:%M:%S')}] –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    run_async_parsing()

    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    start_scheduler()