import json
import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from concurrent.futures import ThreadPoolExecutor, as_completed
from functions import parse_ozon_prices, extract_price_from_text
from config import *


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('product_checker.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def setup_driver(headless=True):
    chrome_options = Options()
    if headless:
        chrome_options.add_argument('--headless=new')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--disable-extensions')
    chrome_options.add_argument('--dns-prefetch-disable')
    chrome_options.add_argument(
        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    chrome_options.add_argument('--window-size=1920,1080')
    driver = webdriver.Chrome(options=chrome_options)
    driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
    driver.set_script_timeout(30)
    return driver


def load_articles_from_file(filename="–ê—Ä—Ç–∏–∫—É–ª—ã.txt"):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            articles = [line.strip() for line in file if line.strip()]

        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(articles)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
        return articles
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {e}")
        return []


def is_product_not_found(driver):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        error_selectors = [
            'h1[contains(text(), "–Ω–µ –Ω–∞–π–¥–µ–Ω")]',
            'h1[contains(text(), "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")]',
            'div[contains(text(), "404")]',
            'div[data-widget="webNotFound"]',
            '//*[contains(text(), "NotFound")]',
            '//*[contains(@class, "error404")]'
        ]
        product_not_found = False
        for selector in error_selectors:
            try:
                if selector.startswith('//'):
                    elements = driver.find_elements(By.XPATH, selector)
                else:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)

                if elements:
                    for element in elements:
                        if element.is_displayed():
                            product_not_found = True
                            break
                if product_not_found:
                    break
            except:
                continue
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫—É
        current_url = driver.current_url.lower()
        page_title = driver.title.lower()

        if (product_not_found or
                "notfound" in current_url or
                "error" in current_url or
                "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in page_title or
                "not found" in page_title):
            return True

        return False
    except:
        return False


def is_product_available(driver):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
        product_indicators = [
            'div[data-widget="webProductHeading"]',
            'h1[data-widget="webProductHeading"]',
            'div[data-widget="webPrice"]',
            'div[data-widget="webGallery"]',
            'button[data-widget="webAddToCart"]'
        ]

        for selector in product_indicators:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                for element in elements:
                    if element.is_displayed():
                        return True
            except:
                continue

        return False
    except:
        return False


def get_product_prices(driver):
    #–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ functions.py
    try:
        ozon_card_price, regular_price = parse_ozon_prices(driver)
        prices = {
            'ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        }
        if ozon_card_price:
            prices['ozon_card_price'] = f"{ozon_card_price} ‚ÇΩ"
        if regular_price:
            prices['regular_price'] = f"{regular_price} ‚ÇΩ"

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥—É–±–ª–∏—Ä—É–µ–º –∏–º–µ—é—â—É—é—Å—è
        if prices['ozon_card_price'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and prices['regular_price'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            prices['ozon_card_price'] = prices['regular_price']
        elif prices['regular_price'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and prices['ozon_card_price'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            prices['regular_price'] = prices['ozon_card_price']
        return prices
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return {
            'ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        }


def get_product_name(driver):
    try:
        name_selectors = [
            'div[data-widget="webProductHeading"] h1',
            'h1[data-widget="webProductHeading"]',
            'h1',
            '.a2k0'
        ]
        for selector in name_selectors:
            try:
                name_element = WebDriverWait(driver, ELEMENT_TIMEOUT).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                name = name_element.text.strip()
                if name and len(name) > 2:
                    return name
            except TimeoutException:
                continue

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        try:
            name_element = driver.find_element(By.TAG_NAME, 'h1')
            name = name_element.text.strip()
            if name and len(name) > 2:
                return name
        except:
            pass

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"


def get_product_sizes(driver):
    sizes = []
    try:
        size_selectors = [
            'div[data-widget="webSizes"] button',
            'div[data-widget="webSizes"] div',
            'button[data-test-id="size-button"]',
            '.ui-a2',
            'div[class*="size"] button'
        ]

        for selector in size_selectors:
            try:
                size_elements = WebDriverWait(driver, ELEMENT_TIMEOUT).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector))
                )
                for size_element in size_elements:
                    try:
                        size_text = size_element.text.strip()
                        if size_text and len(size_text) < 10:
                            is_available = True
                            try:
                                class_attr = size_element.get_attribute('class') or ''
                                if 'disabled' in class_attr or 'unavailable' in class_attr or 'out-of-stock' in class_attr:
                                    is_available = False
                            except:
                                pass

                            sizes.append({
                                'size': size_text,
                                'available': is_available
                            })
                    except:
                        continue

                if sizes:
                    break
            except TimeoutException:
                continue
            except:
                continue
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")

    return sizes


def check_product_availability(driver, article):
    product_data = {
        'article': article,
        'available': False,
        'product_name': '–ù–µ –Ω–∞–π–¥–µ–Ω',
        'product_url': f'https://www.ozon.ru/product/{article}',
        'prices': {
            'ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        },
        'sizes': [],
        'error': None
    }

    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª: {article}")
        driver.get(product_data['product_url'])
        time.sleep(3)

        if is_product_not_found(driver):
            product_data['available'] = False
            product_data['product_name'] = '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            logger.info(f"‚ùå –¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return product_data

        if not is_product_available(driver):
            product_data['available'] = False
            product_data['product_name'] = '–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            logger.info(f"‚ùå –¢–æ–≤–∞—Ä {article} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return product_data

        product_data['available'] = True
        product_data['product_name'] = get_product_name(driver)
        product_data['prices'] = get_product_prices(driver)
        product_data['sizes'] = get_product_sizes(driver)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if product_data['available']:
            status_msg = f"‚úÖ –¢–æ–≤–∞—Ä {article} –Ω–∞–π–¥–µ–Ω: {product_data['product_name'][:50]}..."
            if product_data['prices']['ozon_card_price'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                status_msg += f" | üí∞ {product_data['prices']['ozon_card_price']}"
            if product_data['sizes']:
                available_sizes = [size['size'] for size in product_data['sizes'] if size['available']]
                if available_sizes:
                    status_msg += f" | üìè {', '.join(available_sizes)}"
            logger.info(status_msg)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}: {e}")
        product_data['error'] = str(e)
        product_data['available'] = False

    return product_data


def check_products_parallel(articles, max_workers=MAX_WORKERS):
    if not articles:
        return []

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(articles)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ {max_workers} –ø–æ—Ç–æ–∫–∞—Ö")

    def worker(article):
        driver = None

        for retry_count in range(MAX_RETRIES + 1):
            try:
                driver = setup_driver(headless=True)
                time.sleep(2)  # –í—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                result = check_product_availability(driver, article)
                return result

            except TimeoutException as e:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {article} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1}): {e}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {article} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1}): {e}")
            finally:
                if driver:
                    try:
                        driver.quit()
                    except:
                        pass
            if retry_count < MAX_RETRIES:
                time.sleep(RETRY_DELAY)

        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {article}")
        return {
            'article': article,
            'available': False,
            'product_name': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'product_url': f'https://www.ozon.ru/product/{article}',
            'prices': {
                'ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            },
            'sizes': [],
            'error': f'Failed after {MAX_RETRIES + 1} attempts'
        }

    results = []
    start_time = time.time()

    try:
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_article = {executor.submit(worker, article): article for article in articles}

            for i, future in enumerate(as_completed(future_to_article)):
                article = future_to_article[future]
                try:
                    result = future.result(timeout=TASK_TIMEOUT)
                    results.append(result)

                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    name = result.get('product_name', 'Unknown')[:40]
                    available = result.get('available', False)
                    price = result.get('prices', {}).get('ozon_card_price', 'No price')

                    if available:
                        status = "‚úÖ"
                        sizes_count = len(result.get('sizes', []))
                        available_sizes = len([s for s in result.get('sizes', []) if s.get('available', False)])
                        size_info = f" | üìè {available_sizes}/{sizes_count} —Ä–∞–∑–º–µ—Ä–æ–≤" if sizes_count > 0 else ""
                    else:
                        status = "‚ùå"
                        size_info = ""

                    logger.info(
                        f"{status} –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{len(articles)} - {article} - {name}... - {price}{size_info}")

                except TimeoutException:
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {article}")
                    results.append({
                        'article': article,
                        'available': False,
                        'product_name': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'product_url': f'https://www.ozon.ru/product/{article}',
                        'prices': {
                            'ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                            'regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                        },
                        'sizes': [],
                        'error': 'Task execution timeout'
                    })
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {article}: {e}")
                    results.append({
                        'article': article,
                        'available': False,
                        'product_name': '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'product_url': f'https://www.ozon.ru/product/{article}',
                        'prices': {
                            'ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                            'regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                        },
                        'sizes': [],
                        'error': str(e)
                    })

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        available_count = len([p for p in results if p.get('available', False)])
        unavailable_count = len(results) - available_count

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        logger.info(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}")
        logger.info(f"   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {unavailable_count}")
        logger.info(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {(available_count / len(results) * 100):.1f}%")
        logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤: {e}")

    return results


def save_check_results(results, filename="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.json"):
    try:
        output_data = {
            'check_date': time.strftime('%Y-%m-%d %H:%M:%S'),
            'total_articles': len(results),
            'available_count': len([p for p in results if p.get('available', False)]),
            'unavailable_count': len([p for p in results if not p.get('available', False)]),
            'products': results
        }

        with open(filename, 'w', encoding='utf-8') as file:
            json.dump(output_data, file, indent=4, ensure_ascii=False)

        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False


def main():
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º")

    start_time = time.time()

    try:
        articles = load_articles_from_file("–ê—Ä—Ç–∏–∫—É–ª—ã.txt")

        if not articles:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return False

        results = check_products_parallel(articles, max_workers=MAX_WORKERS)

        if results:
            success = save_check_results(results)

            available_products = [p for p in results if p.get('available', False)]
            unavailable_products = [p for p in results if not p.get('available', False)]

            logger.info("üéâ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
            logger.info(f"üì• –í—Å–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(results)}")
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(available_products)}")
            logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(unavailable_products)}")

            if available_products:
                logger.info("üõçÔ∏è === –î–û–°–¢–£–ü–ù–´–ï –¢–û–í–ê–†–´ ===")
                for i, product in enumerate(available_products):
                    name = product.get('product_name', 'N/A')[:50]
                    ozon_price = product.get('prices', {}).get('ozon_card_price', 'N/A')
                    sizes = product.get('sizes', [])
                    available_sizes = [size['size'] for size in sizes if size.get('available', False)]

                    size_info = f" | –†–∞–∑–º–µ—Ä—ã: {', '.join(available_sizes)}" if available_sizes else ""
                    logger.info(f"{i + 1}. {name} - {ozon_price}{size_info}")

            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
            return False

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return False

    finally:
        total_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")


if __name__ == '__main__':
    main()