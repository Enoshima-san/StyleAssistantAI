import json
import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from functions import page_down, collect_product_info
from concurrent.futures import ThreadPoolExecutor, as_completed
from config import *

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def print_settings():
    logger.info("=== –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–†–°–ï–†–ê ===")
    logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {SEARCH_QUERY}")

    if MAX_PRODUCTS == "ALL":
        logger.info(f"–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤: –í–°–ï —Ç–æ–≤–∞—Ä—ã (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")
    else:
        logger.info(f"–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤: {MAX_PRODUCTS}")

    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {MAX_WORKERS}")
    logger.info(f"–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {PAGE_LOAD_TIMEOUT} —Å–µ–∫")
    logger.info("=========================")


def setup_driver(headless=True):
    chrome_options = Options()
    if headless:
        chrome_options.add_argument('--headless=new')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--disable-extensions')
    chrome_options.add_argument('--dns-prefetch-disable')
    chrome_options.add_argument('--disable-background-timer-throttling')
    chrome_options.add_argument('--disable-backgrounding-occluded-windows')
    chrome_options.add_argument('--enable-javascript')
    chrome_options.add_argument(
        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    chrome_options.add_argument('--window-size=1920,1080')
    driver = webdriver.Chrome(options=chrome_options)
    driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
    driver.set_script_timeout(30)
    return driver


def get_products_links(driver, item_name=SEARCH_QUERY, max_products=MAX_PRODUCTS):
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤: '{item_name}'")
        driver.get('https://ozon.ru')
        time.sleep(3)
        try:
            find_input = WebDriverWait(driver, ELEMENT_TIMEOUT).until(
                EC.presence_of_element_located((By.NAME, 'text'))
            )
            find_input.clear()
            find_input.send_keys(item_name)
            time.sleep(1)
            find_input.send_keys(Keys.ENTER)
            time.sleep(3)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []


        # –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        logger.info("üìú –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        products_urls = set()
        last_count = 0
        no_new_products_count = 0
        max_scroll_attempts = 50 if max_products == "ALL" else 20  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è "ALL"

        for attempt in range(max_scroll_attempts):
            # –°–∫—Ä–æ–ª–ª–∏–Ω–≥
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏

            # –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
            try:
                links = driver.find_elements(By.CSS_SELECTOR, 'a[href*="/product/"]')
                current_count = len(products_urls)

                for link in links:
                    try:
                        href = link.get_attribute("href")
                        if href and '/product/' in href:
                            clean_url = href.split('?')[0].split('#')[0]
                            if '/product/' in clean_url and len(clean_url) > 30:
                                products_urls.add(clean_url)
                    except Exception:
                        continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
                new_count = len(products_urls)
                if new_count == current_count:
                    no_new_products_count += 1
                else:
                    no_new_products_count = 0
                    logger.info(f"üìé –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {new_count}")

                # –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if no_new_products_count >= 10:
                    logger.info("üö´ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥")
                    break

                # –ï—Å–ª–∏ –Ω–µ "ALL" –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if max_products != "ALL" and new_count >= max_products:
                    logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {max_products} —Ç–æ–≤–∞—Ä–æ–≤")
                    break

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞: {e}")
                continue

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ "ALL"
        products_urls = list(products_urls)
        if max_products != "ALL" and max_products > 0:
            products_urls = products_urls[:max_products]

        logger.info(f"‚úÖ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_urls)}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
        if products_urls:
            with open('products_urls_dict.json', 'w', encoding='utf-8') as file:
                json.dump({k: v for k, v in enumerate(products_urls)}, file, indent=4, ensure_ascii=False)

        return products_urls

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫: {e}")
        return []


def parse_products_parallel(urls, max_workers=MAX_WORKERS):
    if not urls:
        return []

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(urls)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {max_workers} –ø–æ—Ç–æ–∫–∞—Ö")

    def worker(url):
        driver = None
        for retry_count in range(MAX_RETRIES + 1):
            try:
                driver = setup_driver(headless=True)

                time.sleep(2)

                result = collect_product_info(driver, url)


                if (result.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' or
                        result.get('product_name') != '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'):
                    return result
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1} –¥–ª—è {url}")

            except TimeoutException as e:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1}): {e}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1}): {e}")
            finally:
                if driver:
                    try:
                        driver.quit()
                    except:
                        pass

            if retry_count < MAX_RETRIES:
                time.sleep(3)

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {url}")
        return {
            'product_url': url,
            'error': f'Failed after {MAX_RETRIES + 1} attempts',
            'product_name': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
            'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        }

    # –ó–∞–ø—É—Å–∫ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
    results = []
    start_time = time.time()

    try:
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_url = {executor.submit(worker, url): url for url in urls}

            for i, future in enumerate(as_completed(future_to_url)):
                url = future_to_url[future]
                try:
                    result = future.result(timeout=90)
                    results.append(result)

                    name = result.get('product_name', 'Unknown')[:40]
                    price = result.get('product_ozon_card_price', 'No price')
                    material = result.get('material', 'N/A')
                    image_status = "üñºÔ∏è" if result.get('product_image_url', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') not in ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö','–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'] else "‚ùå"

                    if price != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and result.get('product_name') != '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏':
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"

                    logger.info(f"{status}{image_status} –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{len(urls)} - {name}... - {price}")

                    if material != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        logger.info(f"   üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material}")

                except TimeoutException:
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {url}")
                    results.append({
                        'product_url': url,
                        'error': 'Task execution timeout',
                        'product_name': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    })
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {url}: {e}")
                    results.append({
                        'product_url': url,
                        'error': str(e),
                        'product_name': '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    })

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        total_time = time.time() - start_time
        speed = len(urls) / total_time if total_time > 0 else 0

        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
        successful = len([p for p in results if p.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'])
        failed = len(results) - successful

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        logger.info(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
        logger.info(f"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(successful / len(results) * 100):.1f}%")
        logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        logger.info(f"   üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} —Ç–æ–≤–∞—Ä–æ–≤/—Å–µ–∫")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤: {e}")

    return results


def main():
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Ozon")
    print_settings()

    start_time = time.time()
    driver = None

    try:
        logger.info("üì• –≠–¢–ê–ü 1: –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã...")
        driver = setup_driver(headless=False)
        urls = get_products_links(driver, item_name=SEARCH_QUERY, max_products=MAX_PRODUCTS)

        if not urls:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã")
            return []

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫
        driver.quit()
        driver = None

        logger.info("üõí –≠–¢–ê–ü 2: –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤...")
        products_data = parse_products_parallel(urls, max_workers=MAX_WORKERS)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if products_data:
            with open('PRODUCTS_DATA.json', 'w', encoding='utf-8') as file:
                json.dump(products_data, file, indent=4, ensure_ascii=False)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            successful = len([p for p in products_data if p.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'])
            failed = len(products_data) - successful
            images_found = len([p for p in products_data if
                                p.get('product_image_url') not in ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                                                                   '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ']])
            materials_found = len([p for p in products_data if p.get('material') != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])

            logger.info("üìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
            logger.info(f"üì• –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_data)}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} —Ç–æ–≤–∞—Ä–æ–≤")
            logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed} —Ç–æ–≤–∞—Ä–æ–≤")
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {images_found}")
            logger.info(f"üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {materials_found}")
            logger.info(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(successful / len(products_data) * 100):.1f}%")

            # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if successful > 0:
                logger.info("üéÅ === –ü–ï–†–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
                successful_products = [p for p in products_data if p.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']
                for i, product in enumerate(successful_products[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                    name = product.get('product_name', 'N/A')[:50]
                    ozon_price = product.get('product_ozon_card_price', 'N/A')
                    regular_price = product.get('product_regular_price', 'N/A')
                    material = product.get('material', 'N/A')
                    composition = product.get('material_composition', 'N/A')
                    lining = product.get('lining_material', 'N/A')
                    color = product.get('color', 'N/A')  # –î–û–ë–ê–í–õ–ï–ù–û
                    type_ = product.get('type', 'N/A')  # –î–û–ë–ê–í–õ–ï–ù–û
                    all_chars = product.get('all_characteristics', {})

                    logger.info(f"{i + 1}. {name}")
                    logger.info(f"   üí≥ Ozon Card: {ozon_price} | üíµ –û–±—ã—á–Ω–∞—è: {regular_price}")
                    logger.info(f"   üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material}")
                    logger.info(f"   üìä –°–æ—Å—Ç–∞–≤: {composition}")
                    logger.info(f"   üßµ –ü–æ–¥–∫–ª–∞–¥–∫–∞: {lining}")
                    logger.info(f"   üé® –¶–≤–µ—Ç: {color}")
                    logger.info(f"   üìù –¢–∏–ø: {type_}")
                    logger.info(f"   üìã –í–°–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ({len(all_chars)}):")

                    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    #for char_key, char_value in list(all_chars.items())[:10]:  # –ü–µ—Ä–≤—ã–µ 10 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    #    logger.info(f"      ‚Ä¢ {char_key}: {char_value}")
                    #if len(all_chars) > 10:
                    #    logger.info(f"      ... –∏ –µ—â–µ {len(all_chars) - 10} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

        return products_data

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass

        total_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info("üèÅ –†–∞–±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == '__main__':
    main()