import json
import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from concurrent.futures import ThreadPoolExecutor, as_completed
from functions import collect_product_info
from config import *


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('incremental_parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def setup_driver(headless=True):
    chrome_options = Options()
    if headless:
        chrome_options.add_argument('--headless=new')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--disable-extensions')
    chrome_options.add_argument('--dns-prefetch-disable')
    chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    chrome_options.add_argument('--window-size=1920,1080')
    driver = webdriver.Chrome(options=chrome_options)
    driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
    driver.set_script_timeout(30)
    return driver


def get_current_products_links(driver, item_name=SEARCH_QUERY, max_products=MAX_PRODUCTS):
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤: '{item_name}'")
        driver.get('https://ozon.ru')
        time.sleep(3)

        try:
            find_input = WebDriverWait(driver, ELEMENT_TIMEOUT).until(
                EC.presence_of_element_located((By.NAME, 'text'))
            )
            find_input.clear()
            find_input.send_keys(item_name)
            time.sleep(1)
            find_input.send_keys(Keys.ENTER)
            time.sleep(3)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []

        # –°–∫—Ä–æ–ª–ª–∏–Ω–≥
        logger.info("üìú –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        products_urls = set()
        last_count = 0
        no_new_products_count = 0
        max_scroll_attempts = 50 if max_products == "ALL" else 20  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è "ALL"

        for attempt in range(max_scroll_attempts):
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)

            # –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
            try:
                links = driver.find_elements(By.CSS_SELECTOR, 'a[href*="/product/"]')
                current_count = len(products_urls)

                for link in links:
                    try:
                        href = link.get_attribute("href")
                        if href and '/product/' in href:
                            clean_url = href.split('?')[0].split('#')[0]
                            if '/product/' in clean_url and len(clean_url) > 30:
                                products_urls.add(clean_url)
                    except Exception:
                        continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
                new_count = len(products_urls)
                if new_count == current_count:
                    no_new_products_count += 1
                else:
                    no_new_products_count = 0
                    logger.info(f"üìé –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {new_count}")

                # –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if no_new_products_count >= 10:
                    logger.info("üö´ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥")
                    break

                # –ï—Å–ª–∏ –Ω–µ "ALL" –∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if max_products != "ALL" and new_count >= max_products:
                    logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {max_products} —Ç–æ–≤–∞—Ä–æ–≤")
                    break

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞: {e}")
                continue

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ "ALL"
        products_urls = list(products_urls)
        if max_products != "ALL" and max_products > 0:
            products_urls = products_urls[:max_products]

        logger.info(f"‚úÖ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products_urls)}")
        return products_urls

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫: {e}")
        return []

def load_existing_data():
    try:
        with open('PRODUCTS_DATA.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è –§–∞–π–ª PRODUCTS_DATA.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def save_data(data):
    try:
        with open('PRODUCTS_DATA.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PRODUCTS_DATA.json ({len(data)} —Ç–æ–≤–∞—Ä–æ–≤)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def find_new_products(current_urls, existing_data):
    # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    existing_urls = {product.get('product_url') for product in existing_data}
    new_urls = [url for url in current_urls if url not in existing_urls]
    
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logger.info(f"   üì• –¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã: {len(current_urls)}")
    logger.info(f"   üíæ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã: {len(existing_data)}")
    logger.info(f"   üÜï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: {len(new_urls)}")
    
    return new_urls

def parse_new_products(urls, max_workers=MAX_WORKERS):
    # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.py)
    if not urls:
        return []

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(urls)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ {max_workers} –ø–æ—Ç–æ–∫–∞—Ö")

    def worker(url):
        driver = None
        for retry_count in range(MAX_RETRIES + 1):
            try:
                driver = setup_driver(headless=True)
                time.sleep(2)
                result = collect_product_info(driver, url)

                if (result.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' or
                        result.get('product_name') != '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'):
                    return result
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1} –¥–ª—è {url}")

            except TimeoutException as e:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1}): {e}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES + 1}): {e}")
            finally:
                if driver:
                    try:
                        driver.quit()
                    except:
                        pass

            if retry_count < MAX_RETRIES:
                time.sleep(RETRY_DELAY)

        logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {url}")
        return {
            'product_url': url,
            'error': f'Failed after {MAX_RETRIES + 1} attempts',
            'product_name': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
            'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        }

    results = []
    start_time = time.time()

    try:
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_url = {executor.submit(worker, url): url for url in urls}

            for i, future in enumerate(as_completed(future_to_url)):
                url = future_to_url[future]
                try:
                    result = future.result(timeout=TASK_TIMEOUT)
                    results.append(result)

                    name = result.get('product_name', 'Unknown')[:40]
                    price = result.get('product_ozon_card_price', 'No price')
                    material = result.get('material', 'N/A')
                    image_status = "üñºÔ∏è" if result.get('product_image_url', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') not in ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'] else "‚ùå"

                    if price != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and result.get('product_name') != '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏':
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"

                    logger.info(f"{status}{image_status} –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä {i + 1}/{len(urls)} - {name}... - {price}")

                    if material != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                        logger.info(f"   üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material}")

                except TimeoutException:
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {url}")
                    results.append({
                        'product_url': url,
                        'error': 'Task execution timeout',
                        'product_name': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    })
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {url}: {e}")
                    results.append({
                        'product_url': url,
                        'error': str(e),
                        'product_name': '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                        'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                        'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    })

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        successful = len([p for p in results if p.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'])
        failed = len(results) - successful

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        logger.info(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
        logger.info(f"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(successful / len(results) * 100):.1f}%")
        logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤: {e}")

    return results

def incremental_parse(min_new_products=1):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Args:
        min_new_products (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Ozon")
    
    start_time = time.time()
    driver = None
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        existing_data = load_existing_data()
        logger.info(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(existing_data)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –°–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö —Å—Å—ã–ª–æ–∫
        logger.info("üì• –°–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã...")
        driver = setup_driver(headless=True)
        current_urls = get_current_products_links(driver, item_name=SEARCH_QUERY, max_products=MAX_PRODUCTS)
        
        if not current_urls:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã")
            return False
        
        # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        new_urls = find_new_products(current_urls, existing_data)
        
        if len(new_urls) < min_new_products:
            logger.info(f"‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ({len(new_urls)}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ({min_new_products}). –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return False
        
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(new_urls)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫
        driver.quit()
        driver = None
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        new_products_data = parse_new_products(new_urls, max_workers=MAX_WORKERS)
        
        if new_products_data:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            all_data = existing_data + new_products_data
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            save_data(all_data)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            successful_new = len([p for p in new_products_data if p.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'])
            
            logger.info("üéâ === –ò–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ===")
            logger.info(f"üì• –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(all_data)}")
            logger.info(f"üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_products_data)}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–æ–≤—ã—Ö: {successful_new}")
            logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ –Ω–æ–≤—ã—Ö: {len(new_products_data) - successful_new}")
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
            if successful_new > 0:
                logger.info("üÜï === –ù–û–í–´–ï –¢–û–í–ê–†–´ ===")
                successful_products = [p for p in new_products_data if p.get('product_ozon_card_price') != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']
                for i, product in enumerate(successful_products):
                    name = product.get('product_name', 'N/A')[:50]
                    ozon_price = product.get('product_ozon_card_price', 'N/A')
                    material = product.get('material', 'N/A')
                    logger.info(f"{i + 1}. {name} - {ozon_price} (–ú–∞—Ç–µ—Ä–∏–∞–ª: {material})")
            
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö")
            return False
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")
        return False
        
    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass
        
        total_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")

if __name__ == '__main__':
    # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    # incremental_parse(min_new_products=5)  # –ó–∞–ø—É—Å—Ç–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 5 –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    incremental_parse(min_new_products=1)  # –ó–∞–ø—É—Å—Ç–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏ –ª—é–±–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤