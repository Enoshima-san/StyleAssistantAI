import time as tm
import re
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchWindowException, WebDriverException

logger = logging.getLogger(__name__)

def page_down(driver):
    # C–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    try:
        for i in range(5):
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            tm.sleep(2)

        logger.info("–°–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞: {e}")


def extract_price_from_text(text):
    try:
        # –£–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        clean_text = text.replace('‚Äâ', '').replace(' ', '').replace('\u202f', '')
        # –ò—â–µ–º —á–∏—Å–ª–∞
        price_match = re.search(r'(\d+)', clean_text)
        if price_match:
            return int(price_match.group(1))
        return None
    except:
        return None


def parse_product_image(driver):
    try:
        high_quality_selectors = [
            'img[src*="/wc2000/"]',
            'img[src*="/wc1500/"]',
            'img[src*="/wc1000/"]',
            'img[src*="/wc800/"]',
            'source[srcset*="/wc2000/"]',
            'source[srcset*="/wc1500/"]',
            'img[data-widget="webGallery"]',
            'div[data-widget="webGallery"] img'
        ]

        for selector in high_quality_selectors:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                for element in elements:
                    src = None
                    if element.tag_name == 'source':
                        srcset = element.get_attribute('srcset')
                        if srcset:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π URL –∏–∑ srcset
                            src = srcset.split(',')[0].split(' ')[0].strip()
                    else:
                        src = element.get_attribute('src')

                    if src and 'http' in src and ('ozon' in src or 'cdn' in src):
                        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if '/wc1000/' in src:
                            src = src.replace('/wc1000/', '/wc2000/')
                        elif '/wc500/' in src:
                            src = src.replace('/wc500/', '/wc2000/')
                        elif '/wc300/' in src:
                            src = src.replace('/wc300/', '/wc2000/')
                        return src
            except:
                continue

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –∏—â–µ–º –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        fallback_selectors = [
            'img[alt*="—Ç–æ–≤–∞—Ä"]',
            'img[alt*="product"]',
            'img[src*="cdn1.ozone.ru"]',
            'img[src*="cdn2.ozone.ru"]',
            '.ui-k6 img',
            'img[loading="lazy"]'
        ]

        for selector in fallback_selectors:
            try:
                images = driver.find_elements(By.CSS_SELECTOR, selector)
                for img in images:
                    src = img.get_attribute('src')
                    if src and 'http' in src and ('ozon' in src or 'cdn' in src):
                        if any(size in src for size in ['/wc1000/', '/wc500/', '/wc300/']):
                            src = src.replace('/wc1000/', '/wc2000/').replace('/wc500/', '/wc2000/').replace('/wc300/',
                                                                                                             '/wc2000/')
                        return src
            except:
                continue

        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"


def parse_ozon_prices(driver):
    try:
        # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç —Å —Ü–µ–Ω–∞–º–∏
        price_widget = driver.find_element(By.CSS_SELECTOR, 'div[data-widget="webPrice"]')
        widget_text = price_widget.text
        logger.info(f"–¢–µ–∫—Å—Ç –≤–∏–¥–∂–µ—Ç–∞ —Ü–µ–Ω: {widget_text}")

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = [line.strip() for line in widget_text.split('\n') if line.strip()]

        ozon_card_price = None
        regular_price = None
        all_prices = []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö —Ç–∏–ø
        for i, line in enumerate(lines):
            price = extract_price_from_text(line)
            if price and price > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
                all_prices.append(price)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–Ω—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                line_lower = line.lower()
                if 'ozon –∫–∞—Ä—Ç' in line_lower or '–∫–∞—Ä—Ç–æ–π' in line_lower or '—Å –∫–∞—Ä—Ç–æ–π' in line_lower:
                    ozon_card_price = price
                elif '–±–µ–∑ ozon –∫–∞—Ä—Ç' in line_lower or '–æ–±—ã—á–Ω–∞—è' in line_lower or '–±–µ–∑ –∫–∞—Ä—Ç—ã' in line_lower:
                    regular_price = price

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ü–µ–Ω—ã, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏—Ö —Ç–∏–ø
        if all_prices:
            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ Ozon Card, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∫–∞–∫ –æ–±—ã—á–Ω—É—é
            min_price = min(all_prices)
            max_price = max(all_prices)

            if not ozon_card_price:
                ozon_card_price = min_price
            if not regular_price:
                regular_price = max_price

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ü–µ–Ω—É
        if ozon_card_price and not regular_price:
            regular_price = ozon_card_price
        elif regular_price and not ozon_card_price:
            ozon_card_price = regular_price

        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã: Ozon Card - {ozon_card_price}, –û–±—ã—á–Ω–∞—è - {regular_price}")
        return ozon_card_price, regular_price

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∏–¥–∂–µ—Ç–∞ —Ü–µ–Ω: {e}")
        return None, None


def parse_product_characteristics(driver):
    all_characteristics = {}
    basic_characteristics = {
        'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    }

    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –í–°–ï–• —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞...")
        tm.sleep(3)
        driver.execute_script("window.scrollTo(0, 1000);")
        tm.sleep(2)

        characteristics_element = None
        selectors = [
            'div[data-widget="webCharacteristics"]',
            'div[data-widget="webCharacteristics"] > div',
            '.ui-k6',  # –û–±—â–∏–π –∫–ª–∞—Å—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            'div[data-widget*="characteristic"]',
            'div[class*="characteristic"]',
            'div[class*="specification"]',
            'dl',  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ definition list
            '.a2g0',  # –ö–ª–∞—Å—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ Ozon
            'section[aria-label*="–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"]',  # –ü–æ aria-label
        ]

        for selector in selectors:
            try:
                characteristics_element = WebDriverWait(driver, 8).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                break
            except TimeoutException:
                continue

        if not characteristics_element:
            logger.warning("‚ùå –ë–ª–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")

            # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–ò–°–ö: –∏—â–µ–º –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
            try:
                characteristics_heading = driver.find_element(By.XPATH,
                                                              "//*[contains(text(), '–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫') or contains(text(), '–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')]")
                characteristics_element = characteristics_heading.find_element(By.XPATH, "./following-sibling::div[1]")
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫")
            except:
                logger.warning("‚ùå –ë–ª–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return basic_characteristics

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –°–ö–†–û–õ–õ–ò–ù–ì –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê
        try:
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});",
                                  characteristics_element)
            tm.sleep(2)
        except:
            pass

        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        full_text = characteristics_element.text
        logger.info(f"üìã –¢–µ–∫—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {full_text[:500]}...")

        # –°–ü–û–°–û–ë 1: –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ)
        try:
            # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            containers = [
                'dl',
                'div[class*="item"]',
                'div[class*="row"]',
                'div[class*="line"]',
                'div[class*="property"]',
                'div'
            ]

            for container in containers:
                try:
                    characteristic_items = characteristics_element.find_elements(By.CSS_SELECTOR, container)

                    for item in characteristic_items:
                        try:
                            item_html = item.get_attribute('outerHTML')
                            item_text = item.text.strip()

                            if not item_text or len(item_text) < 5:
                                continue

                            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 1: <dt>–ö–ª—é—á</dt><dd>–ó–Ω–∞—á–µ–Ω–∏–µ</dd>
                            if 'dt' in item_html and 'dd' in item_html:
                                key_elements = item.find_elements(By.TAG_NAME, 'dt')
                                value_elements = item.find_elements(By.TAG_NAME, 'dd')

                                for key_elem, value_elem in zip(key_elements, value_elements):
                                    key = key_elem.text.strip()
                                    value = value_elem.text.strip()
                                    if (key and value and
                                            len(key) < 100 and
                                            len(value) < 100 and
                                            key not in all_characteristics):
                                        all_characteristics[key] = value
                                        logger.info(f"   üìù {key}: {value}")

                            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 2: div —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                            else:
                                lines = [line.strip() for line in item_text.split('\n') if line.strip()]
                                if len(lines) >= 2:
                                    for i in range(len(lines) - 1):
                                        key = lines[i].strip()
                                        value = lines[i + 1].strip()
                                        if (key and value and
                                                '______' not in key and
                                                '______' not in value and
                                                len(key) < 100 and
                                                len(value) < 100 and
                                                key not in all_characteristics):
                                            all_characteristics[key] = value
                                            logger.info(f"   üìù {key}: {value}")
                                            break
                        except Exception as e:
                            continue
                except:
                    continue

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        # –°–ü–û–°–û–ë 2: –ü–∞—Ä—Å–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
        if not all_characteristics:
            logger.info("–ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º...")
            lines = [line.strip() for line in full_text.split('\n') if line.strip()]

            i = 0
            while i < len(lines) - 1:
                current_line = lines[i]
                next_line = lines[i + 1] if i + 1 < len(lines) else ""

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if (not current_line or
                        '______' in current_line or
                        current_line.isupper() or
                        len(current_line) > 100 or
                        current_line.endswith(':') or
                        '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫' in current_line.lower()):
                    i += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–ª—é—á–æ–º, –∞ —Å–ª–µ–¥—É—é—â–∞—è - –∑–Ω–∞—á–µ–Ω–∏–µ–º
                if (next_line and
                        '______' not in next_line and
                        len(next_line) < 100 and
                        not next_line.isupper() and
                        not next_line.endswith(':') and
                        current_line not in all_characteristics and
                        len(current_line) > 2 and len(next_line) > 2):

                    all_characteristics[current_line] = next_line
                    logger.info(f"   üìù {current_line}: {next_line}")
                    i += 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–µ —Å—Ç—Ä–æ–∫–∏
                else:
                    i += 1

        # –°–ü–û–°–û–ë 3: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
        if not all_characteristics:
            logger.info("–ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è...")

            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã "–ö–ª—é—á: –ó–Ω–∞—á–µ–Ω–∏–µ" –∏–ª–∏ "–ö–ª—é—á - –ó–Ω–∞—á–µ–Ω–∏–µ"
            patterns = [
                r'(.+?)[:\‚Äî]\s*(.+?)(?=\n|$)',
                r'(.+?)\n\s*(.+?)(?=\n|$)',
                r'^(.+?)\s{2,}(.+?)$'  # –î–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            ]

            for pattern in patterns:
                matches = re.finditer(pattern, full_text, re.MULTILINE)
                for match in matches:
                    key = match.group(1).strip()
                    value = match.group(2).strip()

                    if (key and value and
                            '______' not in key and
                            '______' not in value and
                            len(key) < 100 and
                            len(value) < 100 and
                            key not in all_characteristics and
                            len(key) > 2 and len(value) > 2):
                        all_characteristics[key] = value
                        logger.info(f"   üìù {key}: {value}")

        # –û–ë–ù–û–í–õ–Ø–ï–ú –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ò–ó –í–°–ï–• –ù–ê–ô–î–ï–ù–ù–´–•
        for key, value in all_characteristics.items():
            key_lower = key.lower()

            # –ú–∞—Ç–µ—Ä–∏–∞–ª
            if '–º–∞—Ç–µ—Ä–∏–∞–ª' in key_lower and '—Å–æ—Å—Ç–∞–≤' not in key_lower and '–ø–æ–¥–∫–ª–∞–¥' not in key_lower:
                basic_characteristics['material'] = value

            # –°–æ—Å—Ç–∞–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            elif '—Å–æ—Å—Ç–∞–≤' in key_lower:
                basic_characteristics['material_composition'] = value

            # –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥–∫–ª–∞–¥–∫–∏
            elif '–ø–æ–¥–∫–ª–∞–¥' in key_lower:
                basic_characteristics['lining_material'] = value

            # –¶–≤–µ—Ç
            elif '—Ü–≤–µ—Ç' in key_lower:
                basic_characteristics['color'] = value

            # –¢–∏–ø (—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            elif key_lower == '—Ç–∏–ø':
                basic_characteristics['type'] = value

        # –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –í –û–°–ù–û–í–ù–´–ï –î–õ–Ø –í–´–í–û–î–ê
        basic_characteristics['all_characteristics'] = all_characteristics

    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
        basic_characteristics['all_characteristics'] = {}

    logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:")
    logger.info(f"   üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª: '{basic_characteristics['material']}'")
    logger.info(f"   üìä –°–æ—Å—Ç–∞–≤: '{basic_characteristics['material_composition']}'")
    logger.info(f"   üßµ –ü–æ–¥–∫–ª–∞–¥–∫–∞: '{basic_characteristics['lining_material']}'")
    logger.info(f"   üé® –¶–≤–µ—Ç: '{basic_characteristics['color']}'")
    logger.info(f"   üìù –¢–∏–ø: '{basic_characteristics['type']}'")
    logger.info(f"   üìã –í—Å–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(all_characteristics)}")

    return basic_characteristics


def safe_window_management(driver, url):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        original_window = driver.current_window_handle
        # –ó–∞–≥—Ä—É–∂–∞–µ–º URL –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
        driver.get(url)
        tm.sleep(3)

        return original_window, True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞–º–∏: {e}")
        return None, False


def collect_product_info(driver, url=''):
    logger.info(f"–ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä: {url}")

    product_data = {
        'product_id': 'unknown',
        'product_name': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
        'product_ozon_card_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        'product_regular_price': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        'product_image_url': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        'product_url': url,
        'material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'material_composition': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'lining_material': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'color': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'type': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'all_characteristics': {}
    }

    try:
        driver.get(url)
        tm.sleep(3)

        # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
        match = re.search(r'/product/([^/?]+)', url)
        if match:
            product_data['product_id'] = match.group(1)

        # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        try:
            name_element = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-widget="webProductHeading"] h1'))
            )
            product_data['product_name'] = name_element.text.strip()
        except TimeoutException:
            try:
                name_element = driver.find_element(By.TAG_NAME, 'h1')
                product_data['product_name'] = name_element.text.strip()
            except:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        product_data['product_image_url'] = parse_product_image(driver)

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω
        ozon_card_price, regular_price = parse_ozon_prices(driver)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
        if not ozon_card_price or not regular_price:
            logger.info("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω...")
            all_price_elements = driver.find_elements(By.XPATH, '//*[contains(text(), "‚ÇΩ")]')
            prices_found = []

            for element in all_price_elements:
                text = element.text
                price = extract_price_from_text(text)
                if price and price > 100:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç–∞ –ª–∏ —Ü–µ–Ω–∞
                    try:
                        # –ò—â–µ–º –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–µ —Ü–µ–Ω—ã
                        parent = element.find_element(By.XPATH, './..')
                        parent_html = parent.get_attribute('outerHTML')
                        if 'text-decoration: line-through' not in parent_html and 'line-through' not in parent_html:
                            prices_found.append(price)
                    except:
                        prices_found.append(price)

            if prices_found:
                prices_found = list(set(prices_found))
                prices_found.sort()

                # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ Ozon Card
                if prices_found:
                    min_price = min(prices_found)
                    ozon_card_price = min_price
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ü–µ–Ω—ã, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∫–∞–∫ –æ–±—ã—á–Ω—É—é, –∏–Ω–∞—á–µ –¥—É–±–ª–∏—Ä—É–µ–º
                    if len(prices_found) > 1:
                        regular_price = max(prices_found)
                    else:
                        regular_price = min_price

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if ozon_card_price:
            product_data['product_ozon_card_price'] = f"{ozon_card_price} ‚ÇΩ"
        if regular_price:
            product_data['product_regular_price'] = f"{regular_price} ‚ÇΩ"

        # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ —Ü–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥—É–±–ª–∏—Ä—É–µ–º –∏–º–µ—é—â—É—é—Å—è
        if product_data['product_ozon_card_price'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and product_data[
            'product_regular_price'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            product_data['product_ozon_card_price'] = product_data['product_regular_price']
        elif product_data['product_regular_price'] == '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' and product_data[
            'product_ozon_card_price'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            product_data['product_regular_price'] = product_data['product_ozon_card_price']

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        characteristics = parse_product_characteristics(driver)
        product_data.update(characteristics)

        logger.info(
            f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã: Ozon Card - {product_data['product_ozon_card_price']}, –û–±—ã—á–Ω–∞—è - {product_data['product_regular_price']}")
        logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product_data['product_image_url'][:100]}...")
        logger.info(f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –ú–∞—Ç–µ—Ä–∏–∞–ª - {product_data['material']}, "
                    f"–°–æ—Å—Ç–∞–≤ - {product_data['material_composition']}, "
                    f"–ü–æ–¥–∫–ª–∞–¥–∫–∞ - {product_data['lining_material']}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        product_data['error'] = str(e)

    return product_data