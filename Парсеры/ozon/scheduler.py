import time
import schedule
import logging
import threading
from datetime import datetime
from incremental_parser import incremental_parse
from main import main as full_parse
from config import *


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('advanced_scheduler.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class AdvancedScheduler:
    def __init__(self):
        self.is_running = False
        self.last_incremental_run = None
        self.last_full_run = None

    def run_incremental_parse(self):
        def incremental_worker():
            try:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
                self.last_incremental_run = datetime.now()
                success = incremental_parse(min_new_products=1)
                if success:
                    logger.info("‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.info("‚ÑπÔ∏è –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        thread = threading.Thread(target=incremental_worker)
        thread.daemon = True
        thread.start()

    def run_full_parse(self):
        #–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def full_worker():
            try:
                logger.info("üéØ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ì–û –ø–∞—Ä—Å–∏–Ω–≥–∞...")
                self.last_full_run = datetime.now()
                full_parse()
                logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        thread = threading.Thread(target=full_worker)
        thread.daemon = True
        thread.start()

    def print_status(self):
        status = []
        status.append("=== –°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===")
        status.append(f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        if self.last_incremental_run:
            status.append(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π: {self.last_incremental_run.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            status.append("üîÑ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π: –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è")

        if self.last_full_run:
            status.append(f"üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π: {self.last_full_run.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            status.append("üéØ –ü–æ–ª–Ω—ã–π: –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è")

        status.append("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        status.append(f"   - –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π: –∫–∞–∂–¥—ã–µ {INCREMENTAL_INTERVAL_MINUTES} —á–∞—Å–æ–≤")
        status.append(f"   - –ü–æ–ª–Ω—ã–π: –∫–∞–∂–¥—ã–µ {FULL_INTERVAL_HOURS} —á–∞—Å–æ–≤")
        status.append("===========================")

        for line in status:
            logger.info(line)

    def setup_schedule(self):
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        schedule.every(INCREMENTAL_INTERVAL_MINUTES).minutes.do(self.run_incremental_parse)
        # –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
        schedule.every(FULL_INTERVAL_HOURS).hours.do(self.run_full_parse)
        # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–π n –º–∏–Ω—É—Ç
        schedule.every(INCREMENTAL_INTERVAL_MINUTES).minutes.do(self.print_status)

    def start(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        self.is_running = True
        self.setup_schedule()

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ä–∞–∑—É
        logger.info("‚è∞ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        self.run_incremental_parse()
        time.sleep(10)

        self.print_status()
        try:
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except KeyboardInterrupt:
            logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.is_running = False

    def stop(self):
        self.is_running = False


def main():
    scheduler = AdvancedScheduler()
    print("=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–ú ===")
    print("1 - –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    print("2 - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("3 - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("4 - –°—Ç–∞—Ç—É—Å")
    print("0 - –í—ã—Ö–æ–¥")
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): ").strip()

        if choice == "1":
            print("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            scheduler.start()
            break
        elif choice == "2":
            print("–ó–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            scheduler.run_incremental_parse()
        elif choice == "3":
            print("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            scheduler.run_full_parse()
        elif choice == "4":
            scheduler.print_status()
        elif choice == "0":
            print("–í—ã—Ö–æ–¥...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == '__main__':
    main()